"C:\Program Files\Java\jdk1.8.0_181\bin\java.exe" -Dfile.encoding=windows-1251 -jar C:\Users\abochkov\Workspace\IdeaProjects\Benchmarks\utils\target\benchmarks.jar -f 1 -wi 2 -i 5
# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testCreateSha1Git

# Run progress: 0,00% complete, ETA 00:03:30
# Fork: 1 of 1
# Warmup Iteration   1: 6128,697 ops/s
# Warmup Iteration   2: 6419,454 ops/s
Iteration   1: 6428,237 ops/s
Iteration   2: 6406,408 ops/s
Iteration   3: 6425,683 ops/s
Iteration   4: 6385,330 ops/s
Iteration   5: 6424,320 ops/s


Result "famo.utils.MyBenchmark.testCreateSha1Git":
  6413,995 ±(99.9%) 70,091 ops/s [Average]
  (min, avg, max) = (6385,330, 6413,995, 6428,237), stdev = 18,202
  CI (99.9%): [6343,905, 6484,086] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testCreateSha1Git2

# Run progress: 33,33% complete, ETA 00:02:21
# Fork: 1 of 1
# Warmup Iteration   1: 6280,096 ops/s
# Warmup Iteration   2: 6421,139 ops/s
Iteration   1: 6413,851 ops/s
Iteration   2: 6435,966 ops/s
Iteration   3: 6429,751 ops/s
Iteration   4: 6455,887 ops/s
Iteration   5: 6447,832 ops/s


Result "famo.utils.MyBenchmark.testCreateSha1Git2":
  6436,657 ±(99.9%) 62,772 ops/s [Average]
  (min, avg, max) = (6413,851, 6436,657, 6455,887), stdev = 16,302
  CI (99.9%): [6373,885, 6499,430] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testCreateSha1Git3

# Run progress: 66,67% complete, ETA 00:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 5454,803 ops/s
# Warmup Iteration   2: 5786,795 ops/s
Iteration   1: 5822,081 ops/s
Iteration   2: 5826,163 ops/s
Iteration   3: 5832,119 ops/s
Iteration   4: 5803,376 ops/s
Iteration   5: 5832,559 ops/s


Result "famo.utils.MyBenchmark.testCreateSha1Git3":
  5823,260 ±(99.9%) 45,972 ops/s [Average]
  (min, avg, max) = (5803,376, 5823,260, 5832,559), stdev = 11,939
  CI (99.9%): [5777,288, 5869,232] (assumes normal distribution)


# Run complete. Total time: 00:03:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                        Mode  Cnt     Score    Error  Units
MyBenchmark.testCreateSha1Git   thrpt    5  6413,995 ± 70,091  ops/s
MyBenchmark.testCreateSha1Git2  thrpt    5  6436,657 ± 62,772  ops/s
MyBenchmark.testCreateSha1Git3  thrpt    5  5823,260 ± 45,972  ops/s

Process finished with exit code 0


"C:\Program Files\Java\jdk1.8.0_181\bin\java.exe" -Dfile.encoding=windows-1251 -jar C:\Users\abochkov\Workspace\IdeaProjects\Benchmarks\utils\target\benchmarks.jar -f 1 -wi 2 -i 5
# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testCreateString

# Run progress: 0,00% complete, ETA 00:09:20
# Fork: 1 of 1
# Warmup Iteration   1: 137827832,075 ops/s
# Warmup Iteration   2: 143174514,343 ops/s
Iteration   1: 184395220,471 ops/s
Iteration   2: 185194908,322 ops/s
Iteration   3: 185381774,609 ops/s
Iteration   4: 184245294,072 ops/s
Iteration   5: 185465035,885 ops/s


Result "famo.utils.MyBenchmark.testCreateString":
  184936446,672 ±(99.9%) 2207953,712 ops/s [Average]
  (min, avg, max) = (184245294,072, 184936446,672, 185465035,885), stdev = 573398,567
  CI (99.9%): [182728492,959, 187144400,384] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testCreateStringWithRef

# Run progress: 12,50% complete, ETA 00:08:14
# Fork: 1 of 1
# Warmup Iteration   1: 143329001,960 ops/s
# Warmup Iteration   2: 148992654,793 ops/s
Iteration   1: 165836119,442 ops/s
Iteration   2: 165739320,558 ops/s
Iteration   3: 164826330,726 ops/s
Iteration   4: 166235786,634 ops/s
Iteration   5: 165852535,530 ops/s


Result "famo.utils.MyBenchmark.testCreateStringWithRef":
  165698018,578 ±(99.9%) 2013492,270 ops/s [Average]
  (min, avg, max) = (164826330,726, 165698018,578, 166235786,634), stdev = 522897,548
  CI (99.9%): [163684526,308, 167711510,848] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testCreateStringWithRefLength

# Run progress: 25,00% complete, ETA 00:07:03
# Fork: 1 of 1
# Warmup Iteration   1: 319460660,796 ops/s
# Warmup Iteration   2: 313969838,487 ops/s
Iteration   1: 396911315,030 ops/s
Iteration   2: 397565753,803 ops/s
Iteration   3: 396856116,428 ops/s
Iteration   4: 398342478,940 ops/s
Iteration   5: 397375694,212 ops/s


Result "famo.utils.MyBenchmark.testCreateStringWithRefLength":
  397410271,683 ±(99.9%) 2318735,551 ops/s [Average]
  (min, avg, max) = (396856116,428, 397410271,683, 398342478,940), stdev = 602168,259
  CI (99.9%): [395091536,131, 399729007,234] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testDigestByteArray

# Run progress: 37,50% complete, ETA 00:05:52
# Fork: 1 of 1
# Warmup Iteration   1: 46438,582 ops/s
# Warmup Iteration   2: 46821,615 ops/s
Iteration   1: 46885,414 ops/s
Iteration   2: 46946,661 ops/s
Iteration   3: 47034,504 ops/s
Iteration   4: 46942,813 ops/s
Iteration   5: 46851,638 ops/s


Result "famo.utils.MyBenchmark.testDigestByteArray":
  46932,206 ±(99.9%) 268,629 ops/s [Average]
  (min, avg, max) = (46851,638, 46932,206, 47034,504), stdev = 69,762
  CI (99.9%): [46663,576, 47200,835] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testDigestByteArray50k

# Run progress: 50,00% complete, ETA 00:04:42
# Fork: 1 of 1
# Warmup Iteration   1: 4833,317 ops/s
# Warmup Iteration   2: 4858,722 ops/s
Iteration   1: 4843,523 ops/s
Iteration   2: 4863,679 ops/s
Iteration   3: 4884,669 ops/s
Iteration   4: 4879,998 ops/s
Iteration   5: 4886,292 ops/s


Result "famo.utils.MyBenchmark.testDigestByteArray50k":
  4871,632 ±(99.9%) 69,638 ops/s [Average]
  (min, avg, max) = (4843,523, 4871,632, 4886,292), stdev = 18,085
  CI (99.9%): [4801,994, 4941,271] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testDigestInputStream

# Run progress: 62,50% complete, ETA 00:03:31
# Fork: 1 of 1
# Warmup Iteration   1: 46442,307 ops/s
# Warmup Iteration   2: 46953,811 ops/s
Iteration   1: 46933,753 ops/s
Iteration   2: 46850,454 ops/s
Iteration   3: 45945,605 ops/s
Iteration   4: 46224,351 ops/s
Iteration   5: 46873,744 ops/s


Result "famo.utils.MyBenchmark.testDigestInputStream":
  46565,582 ±(99.9%) 1735,436 ops/s [Average]
  (min, avg, max) = (45945,605, 46565,582, 46933,753), stdev = 450,687
  CI (99.9%): [44830,146, 48301,017] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testDigestInputStream50k

# Run progress: 75,00% complete, ETA 00:02:20
# Fork: 1 of 1
# Warmup Iteration   1: 4833,464 ops/s
# Warmup Iteration   2: 4879,618 ops/s
Iteration   1: 4891,123 ops/s
Iteration   2: 4871,897 ops/s
Iteration   3: 4889,982 ops/s
Iteration   4: 4885,327 ops/s
Iteration   5: 4894,550 ops/s


Result "famo.utils.MyBenchmark.testDigestInputStream50k":
  4886,576 ±(99.9%) 34,056 ops/s [Average]
  (min, avg, max) = (4871,897, 4886,576, 4894,550), stdev = 8,844
  CI (99.9%): [4852,520, 4920,632] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testReadFile

# Run progress: 87,50% complete, ETA 00:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 11203,043 ops/s
# Warmup Iteration   2: 11395,136 ops/s
Iteration   1: 11336,305 ops/s
Iteration   2: 11408,249 ops/s
Iteration   3: 11401,412 ops/s
Iteration   4: 11147,551 ops/s
Iteration   5: 10455,451 ops/s


Result "famo.utils.MyBenchmark.testReadFile":
  11149,793 ±(99.9%) 1548,674 ops/s [Average]
  (min, avg, max) = (10455,451, 11149,793, 11408,249), stdev = 402,186
  CI (99.9%): [9601,120, 12698,467] (assumes normal distribution)


# Run complete. Total time: 00:09:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt          Score         Error  Units
MyBenchmark.testCreateString               thrpt    5  184936446,672 ± 2207953,712  ops/s
MyBenchmark.testCreateStringWithRef        thrpt    5  165698018,578 ± 2013492,270  ops/s
MyBenchmark.testCreateStringWithRefLength  thrpt    5  397410271,683 ± 2318735,551  ops/s
MyBenchmark.testDigestByteArray            thrpt    5      46932,206 ±     268,629  ops/s
MyBenchmark.testDigestByteArray50k         thrpt    5       4871,632 ±      69,638  ops/s
MyBenchmark.testDigestInputStream          thrpt    5      46565,582 ±    1735,436  ops/s
MyBenchmark.testDigestInputStream50k       thrpt    5       4886,576 ±      34,056  ops/s
MyBenchmark.testReadFile                   thrpt    5      11149,793 ±    1548,674  ops/s

Process finished with exit code 0



"C:\Program Files\Java\jdk1.8.0_181\bin\java.exe" -Dfile.encoding=windows-1251 -jar C:\Users\abochkov\Workspace\IdeaProjects\Benchmarks\utils\target\benchmarks.jar -f 1 -wi 2 -i 5
# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testDigestByteArray500k

# Run progress: 0,00% complete, ETA 00:02:20
# Fork: 1 of 1
# Warmup Iteration   1: 481,698 ops/s
# Warmup Iteration   2: 484,375 ops/s
Iteration   1: 485,632 ops/s
Iteration   2: 487,593 ops/s
Iteration   3: 487,053 ops/s
Iteration   4: 487,629 ops/s
Iteration   5: 485,575 ops/s


Result "famo.utils.MyBenchmark.testDigestByteArray500k":
  486,696 ±(99.9%) 3,941 ops/s [Average]
  (min, avg, max) = (485,575, 486,696, 487,629), stdev = 1,023
  CI (99.9%): [482,756, 490,637] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testDigestInputStream500k

# Run progress: 50,00% complete, ETA 00:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 481,623 ops/s
# Warmup Iteration   2: 486,702 ops/s
Iteration   1: 488,328 ops/s
Iteration   2: 488,513 ops/s
Iteration   3: 489,343 ops/s
Iteration   4: 468,806 ops/s
Iteration   5: 470,466 ops/s


Result "famo.utils.MyBenchmark.testDigestInputStream500k":
  481,091 ±(99.9%) 40,356 ops/s [Average]
  (min, avg, max) = (468,806, 481,091, 489,343), stdev = 10,480
  CI (99.9%): [440,735, 521,448] (assumes normal distribution)


# Run complete. Total time: 00:02:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt    Score    Error  Units
MyBenchmark.testDigestByteArray500k    thrpt    5  486,696 ±  3,941  ops/s
MyBenchmark.testDigestInputStream500k  thrpt    5  481,091 ± 40,356  ops/s

Process finished with exit code 0



"C:\Program Files\Java\jdk1.8.0_181\bin\java.exe" -Dfile.encoding=windows-1251 -jar C:\Users\abochkov\Workspace\IdeaProjects\Benchmarks\utils\target\benchmarks.jar -f 1 -wi 2 -i 5
# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testCreateSha1Git2_500k

# Run progress: 0,00% complete, ETA 00:07:00
# Fork: 1 of 1
# Warmup Iteration   1: 361,642 ops/s
# Warmup Iteration   2: 363,833 ops/s
Iteration   1: 373,738 ops/s
Iteration   2: 369,261 ops/s
Iteration   3: 375,360 ops/s
Iteration   4: 372,591 ops/s
Iteration   5: 374,248 ops/s


Result "famo.utils.MyBenchmark.testCreateSha1Git2_500k":
  373,039 ±(99.9%) 8,992 ops/s [Average]
  (min, avg, max) = (369,261, 373,039, 375,360), stdev = 2,335
  CI (99.9%): [364,047, 382,032] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testCreateSha1Git2_50k

# Run progress: 16,67% complete, ETA 00:05:52
# Fork: 1 of 1
# Warmup Iteration   1: 2473,888 ops/s
# Warmup Iteration   2: 2569,111 ops/s
Iteration   1: 2573,276 ops/s
Iteration   2: 2500,924 ops/s
Iteration   3: 2472,528 ops/s
Iteration   4: 2520,552 ops/s
Iteration   5: 2479,170 ops/s


Result "famo.utils.MyBenchmark.testCreateSha1Git2_50k":
  2509,290 ±(99.9%) 155,817 ops/s [Average]
  (min, avg, max) = (2472,528, 2509,290, 2573,276), stdev = 40,465
  CI (99.9%): [2353,473, 2665,107] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testCreateSha1Git3_500k

# Run progress: 33,33% complete, ETA 00:04:42
# Fork: 1 of 1
# Warmup Iteration   1: 273,079 ops/s
# Warmup Iteration   2: 285,609 ops/s
Iteration   1: 262,582 ops/s
Iteration   2: 286,478 ops/s
Iteration   3: 288,668 ops/s
Iteration   4: 290,283 ops/s
Iteration   5: 284,595 ops/s


Result "famo.utils.MyBenchmark.testCreateSha1Git3_500k":
  282,521 ±(99.9%) 43,716 ops/s [Average]
  (min, avg, max) = (262,582, 282,521, 290,283), stdev = 11,353
  CI (99.9%): [238,805, 326,238] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testCreateSha1Git3_50k

# Run progress: 50,00% complete, ETA 00:03:31
# Fork: 1 of 1
# Warmup Iteration   1: 1978,246 ops/s
# Warmup Iteration   2: 2058,891 ops/s
Iteration   1: 2059,127 ops/s
Iteration   2: 2117,652 ops/s
Iteration   3: 2090,248 ops/s
Iteration   4: 2091,789 ops/s
Iteration   5: 2121,380 ops/s


Result "famo.utils.MyBenchmark.testCreateSha1Git3_50k":
  2096,039 ±(99.9%) 96,715 ops/s [Average]
  (min, avg, max) = (2059,127, 2096,039, 2121,380), stdev = 25,117
  CI (99.9%): [1999,324, 2192,754] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testCreateSha1Git_500k

# Run progress: 66,67% complete, ETA 00:02:21
# Fork: 1 of 1
# Warmup Iteration   1: 355,209 ops/s
# Warmup Iteration   2: 355,023 ops/s
Iteration   1: 361,719 ops/s
Iteration   2: 364,103 ops/s
Iteration   3: 361,794 ops/s
Iteration   4: 365,269 ops/s
Iteration   5: 365,274 ops/s


Result "famo.utils.MyBenchmark.testCreateSha1Git_500k":
  363,632 ±(99.9%) 6,844 ops/s [Average]
  (min, avg, max) = (361,719, 363,632, 365,274), stdev = 1,777
  CI (99.9%): [356,787, 370,476] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testCreateSha1Git_50k

# Run progress: 83,33% complete, ETA 00:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 2442,074 ops/s
# Warmup Iteration   2: 2460,373 ops/s
Iteration   1: 2539,540 ops/s
Iteration   2: 2535,680 ops/s
Iteration   3: 2504,107 ops/s
Iteration   4: 2521,449 ops/s
Iteration   5: 2514,246 ops/s


Result "famo.utils.MyBenchmark.testCreateSha1Git_50k":
  2523,004 ±(99.9%) 56,801 ops/s [Average]
  (min, avg, max) = (2504,107, 2523,004, 2539,540), stdev = 14,751
  CI (99.9%): [2466,204, 2579,805] (assumes normal distribution)


# Run complete. Total time: 00:07:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt     Score     Error  Units
MyBenchmark.testCreateSha1Git2_500k  thrpt    5   373,039 ±   8,992  ops/s
MyBenchmark.testCreateSha1Git2_50k   thrpt    5  2509,290 ± 155,817  ops/s
MyBenchmark.testCreateSha1Git3_500k  thrpt    5   282,521 ±  43,716  ops/s
MyBenchmark.testCreateSha1Git3_50k   thrpt    5  2096,039 ±  96,715  ops/s
MyBenchmark.testCreateSha1Git_500k   thrpt    5   363,632 ±   6,844  ops/s
MyBenchmark.testCreateSha1Git_50k    thrpt    5  2523,004 ±  56,801  ops/s

Process finished with exit code 0



"C:\Program Files\Java\jdk1.8.0_181\bin\java.exe" -Dfile.encoding=windows-1251 -jar C:\Users\abochkov\Workspace\IdeaProjects\Benchmarks\utils\target\benchmarks.jar -f 1 -wi 2 -i 5
# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testCreateSha1Git

# Run progress: 0,00% complete, ETA 00:03:30
# Fork: 1 of 1
# Warmup Iteration   1: 6237,466 ops/s
# Warmup Iteration   2: 6454,461 ops/s
Iteration   1: 6475,629 ops/s
Iteration   2: 6476,974 ops/s
Iteration   3: 6439,893 ops/s
Iteration   4: 6271,810 ops/s
Iteration   5: 6426,867 ops/s


Result "famo.utils.MyBenchmark.testCreateSha1Git":
  6418,234 ±(99.9%) 326,330 ops/s [Average]
  (min, avg, max) = (6271,810, 6418,234, 6476,974), stdev = 84,747
  CI (99.9%): [6091,904, 6744,565] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testCreateSha1Git2

# Run progress: 33,33% complete, ETA 00:02:21
# Fork: 1 of 1
# Warmup Iteration   1: 6285,918 ops/s
# Warmup Iteration   2: 6388,413 ops/s
Iteration   1: 6437,696 ops/s
Iteration   2: 6408,603 ops/s
Iteration   3: 6453,694 ops/s
Iteration   4: 6380,926 ops/s
Iteration   5: 6459,977 ops/s


Result "famo.utils.MyBenchmark.testCreateSha1Git2":
  6428,179 ±(99.9%) 127,258 ops/s [Average]
  (min, avg, max) = (6380,926, 6428,179, 6459,977), stdev = 33,048
  CI (99.9%): [6300,922, 6555,437] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.testCreateSha1Git3

# Run progress: 66,67% complete, ETA 00:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 5683,178 ops/s
# Warmup Iteration   2: 5908,904 ops/s
Iteration   1: 5904,101 ops/s
Iteration   2: 5884,745 ops/s
Iteration   3: 5882,281 ops/s
Iteration   4: 5913,833 ops/s
Iteration   5: 5553,089 ops/s


Result "famo.utils.MyBenchmark.testCreateSha1Git3":
  5827,610 ±(99.9%) 593,113 ops/s [Average]
  (min, avg, max) = (5553,089, 5827,610, 5913,833), stdev = 154,030
  CI (99.9%): [5234,497, 6420,723] (assumes normal distribution)


# Run complete. Total time: 00:03:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                        Mode  Cnt     Score     Error  Units
MyBenchmark.testCreateSha1Git   thrpt    5  6418,234 ± 326,330  ops/s
MyBenchmark.testCreateSha1Git2  thrpt    5  6428,179 ± 127,258  ops/s
MyBenchmark.testCreateSha1Git3  thrpt    5  5827,610 ± 593,113  ops/s

Process finished with exit code 0



"C:\Program Files\Java\jdk1.8.0_181\bin\java.exe" -Dfile.encoding=windows-1251 -jar C:\Users\abochkov\Workspace\IdeaProjects\Benchmarks\utils\target\benchmarks.jar -f 1 -wi 2 -i 5
# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.test_100B_Sha1

# Run progress: 0,00% complete, ETA 00:07:00
# Fork: 1 of 1
# Warmup Iteration   1: 819112,304 ops/s
# Warmup Iteration   2: 922778,130 ops/s
Iteration   1: 896063,248 ops/s
Iteration   2: 926543,777 ops/s
Iteration   3: 902275,992 ops/s
Iteration   4: 874336,934 ops/s
Iteration   5: 850499,458 ops/s


Result "famo.utils.MyBenchmark.test_100B_Sha1":
  889943,882 ±(99.9%) 111078,218 ops/s [Average]
  (min, avg, max) = (850499,458, 889943,882, 926543,777), stdev = 28846,660
  CI (99.9%): [778865,664, 1001022,099] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.test_100B_Sha256

# Run progress: 16,67% complete, ETA 00:05:53
# Fork: 1 of 1
# Warmup Iteration   1: 709702,078 ops/s
# Warmup Iteration   2: 715922,889 ops/s
Iteration   1: 777404,585 ops/s
Iteration   2: 734546,414 ops/s
Iteration   3: 787330,790 ops/s
Iteration   4: 739799,041 ops/s
Iteration   5: 765999,828 ops/s


Result "famo.utils.MyBenchmark.test_100B_Sha256":
  761016,131 ±(99.9%) 88996,762 ops/s [Average]
  (min, avg, max) = (734546,414, 761016,131, 787330,790), stdev = 23112,176
  CI (99.9%): [672019,370, 850012,893] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.test_2000B_Sha1

# Run progress: 33,33% complete, ETA 00:04:42
# Fork: 1 of 1
# Warmup Iteration   1: 106658,270 ops/s
# Warmup Iteration   2: 110959,353 ops/s
Iteration   1: 110233,282 ops/s
Iteration   2: 109308,216 ops/s
Iteration   3: 109282,897 ops/s
Iteration   4: 110571,314 ops/s
Iteration   5: 110648,283 ops/s


Result "famo.utils.MyBenchmark.test_2000B_Sha1":
  110008,799 ±(99.9%) 2578,427 ops/s [Average]
  (min, avg, max) = (109282,897, 110008,799, 110648,283), stdev = 669,609
  CI (99.9%): [107430,372, 112587,225] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.test_2000B_Sha256

# Run progress: 50,00% complete, ETA 00:03:31
# Fork: 1 of 1
# Warmup Iteration   1: 68099,969 ops/s
# Warmup Iteration   2: 68493,137 ops/s
Iteration   1: 68356,204 ops/s
Iteration   2: 68594,668 ops/s
Iteration   3: 68520,554 ops/s
Iteration   4: 68608,641 ops/s
Iteration   5: 68294,984 ops/s


Result "famo.utils.MyBenchmark.test_2000B_Sha256":
  68475,010 ±(99.9%) 547,191 ops/s [Average]
  (min, avg, max) = (68294,984, 68475,010, 68608,641), stdev = 142,104
  CI (99.9%): [67927,819, 69022,202] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.test_200B_Sha1

# Run progress: 66,67% complete, ETA 00:02:21
# Fork: 1 of 1
# Warmup Iteration   1: 575859,504 ops/s
# Warmup Iteration   2: 624071,663 ops/s
Iteration   1: 627500,268 ops/s
Iteration   2: 598985,838 ops/s
Iteration   3: 571918,731 ops/s
Iteration   4: 603609,781 ops/s
Iteration   5: 587357,695 ops/s


Result "famo.utils.MyBenchmark.test_200B_Sha1":
  597874,463 ±(99.9%) 79292,412 ops/s [Average]
  (min, avg, max) = (571918,731, 597874,463, 627500,268), stdev = 20591,988
  CI (99.9%): [518582,051, 677166,875] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13
# VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe
# VM options: -Dfile.encoding=windows-1251
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: famo.utils.MyBenchmark.test_200B_Sha256

# Run progress: 83,33% complete, ETA 00:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 407642,356 ops/s
# Warmup Iteration   2: 439753,126 ops/s
Iteration   1: 457104,900 ops/s
Iteration   2: 443899,039 ops/s
Iteration   3: 463711,573 ops/s
Iteration   4: 464951,530 ops/s
Iteration   5: 468754,707 ops/s


Result "famo.utils.MyBenchmark.test_200B_Sha256":
  459684,350 ±(99.9%) 37633,160 ops/s [Average]
  (min, avg, max) = (443899,039, 459684,350, 468754,707), stdev = 9773,212
  CI (99.9%): [422051,190, 497317,510] (assumes normal distribution)


# Run complete. Total time: 00:07:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt       Score        Error  Units
MyBenchmark.test_100B_Sha1     thrpt    5  889943,882 ± 111078,218  ops/s
MyBenchmark.test_100B_Sha256   thrpt    5  761016,131 ±  88996,762  ops/s
MyBenchmark.test_2000B_Sha1    thrpt    5  110008,799 ±   2578,427  ops/s
MyBenchmark.test_2000B_Sha256  thrpt    5   68475,010 ±    547,191  ops/s
MyBenchmark.test_200B_Sha1     thrpt    5  597874,463 ±  79292,412  ops/s
MyBenchmark.test_200B_Sha256   thrpt    5  459684,350 ±  37633,160  ops/s

Process finished with exit code 0
